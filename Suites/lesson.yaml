- Class: meta
  Course: beginR
  Lesson: Suites
  Author: SANSEN Joris
  Type: Standard
  Organization: Bordeaux INP / ENSTBB
  Version: 2.4.5

# Q1
- Class: text
  Output: "Dans cette leçon, nous allons travailler avec les suites de nombres sous R."

# Q2
- Class: cmd_question
  Output: "La façon la plus simple de créer une suite de nombres dans R est d'utiliser l'opérateur deux-points ':'.  Tapez '1:20' pour voir comment cela fonctionne."
  CorrectAnswer: '1:20'
  AnswerTests: omnitest(correctExpr='1:20')
  Hint: "Tapez 1:20 sans espaces ni parenthèses. Assurez-vous bien d'utiliser les deux-points et non le point-virgule."

# Q3
- Class: cmd_question
  Output: "Cela nous donne tous les entiers [1:20] (depuis 1, jusqu'à 20 inclus). Nous pourrions également l'utiliser pour créer une suite de nombres réels. Par exemple, essayez d'écrire pi:10."
  CorrectAnswer: pi:10
  AnswerTests: omnitest(correctExpr='pi:10')
  Hint: "Entrez pi:10 et voyez le résultat. Pi est une constante pré-définie dans R qui prend en valeur 3.1415...."

# Q4
- Class: text
  Output: "Le résultat est un vecteur de nombres réels démarrant à pi (3.142...) et augmentant par incrément de 1. La limite maximale de 10 n'est jamais atteinte puisque le nombre suivant de notre suite par un incrément de 1 serait supérieur à 10."

# Q5
- Class: cmd_question
  Output: "Que se passe-t-il si on tape '15:1'? Essayez pour le découvrir!"
  CorrectAnswer: '15:1'
  AnswerTests: omnitest(correctExpr='15:1')
  Hint: "Tapez 15:1 et appuyez sur Entrée."

# Q6
- Class: text
  Output: "Cela crée un vecteur qui décrémente de 15 à 1 (inclus) par pas de 1. Il est rare d'avoir besoin de ce type de comportement mais c'est toujours bon à savoir."

# Q7
- Class: text
  Output: "Rappelez-vous qui si vous avez des questions à propos d'une fonction particulière dans R, vous pouvez accèdez à sa documentation en utilisant le point d'interrogation suivi du nom de la fonction. '?nomdefonction'. Cependant, dans le cas d'un opérateur, il faut encadrer le symbole dans des guillemets, apostrophes ou 'backticks' (apostrophe inversée généralement placée sur la touche 7, à côté du è, et donc accessible via alt-gr).  Cela Donne donc: ? `:`"

# Q8
- Class: cmd_question
  Output: "Cherchez maintenant la documentation pour l'opérateur ':'."
  CorrectAnswer: ?':'
  AnswerTests: any_of_exprs('?`:`', "?':'", '?":"')
  Hint: "Pensez à encadrer l'opérateur, cela sert à 'prévenir' R que l'on veut effectuer une recherche sur l'opérateur et non l'utiliser en tant qu'opérateur. Votre commande devrait donc ressembler à cela: ?`:` "


# Q9
- Class: text
  Output: "Souvent, on veut avoir plus de contrôle sur une suite que l'on crée que ce que nous permet l'opérateur ':'.  Dans ce cas, nous utiliserons la fonction seq() (suite se dit sequence en anglais)."

# Q10
- Class: cmd_question
  Output: "L'utilisation la plus simple de seq() fait exactement la même chose que l'opérateur ':'. Tapez seq(1, 20) pour le constater."
  CorrectAnswer: seq(1, 20)
  AnswerTests: omnitest(correctExpr='seq(1, 20)')
  Hint: "Tapez seq(1, 20) puis Entrée. L'espace après la virgule n'est pas nécessaire mais recommandé pour faciliter la lecture du code, il apparait ainsi moins sérré, moins 'encombré'... plus aéré. Et rappelez vous, un code facile à lire, c'est un évaluateur plus heureux ;-)"

# Q11
- Class: cmd_question
  Output: "Cela vous donne le même résultat que la commande 1:20.  Cependant, disons qu'au lieu d'un vecteur allant de 1 à 20, nous voulons obtenir un vecteur allant de 0 à 10 par incrément de 0.5 (notez l'écriture à l'anglaise avec le point comme séparateur décimal, c'est important, la virgule n'étant pas utilisable comme séparateur vous devrez vous habituer à utiliser le point). Dans ce cas, vous utiliserez la commande seq(0, 10,  by=0.5). Essayez-la."
  CorrectAnswer: seq(0, 10, by=0.5)
  AnswerTests: omnitest(correctExpr='seq(0, 10, by=0.5)')
  Hint: "Vous utilisez toujours la fonction seq() mais cette fois avec un argument supplémentaire qui indique que vous voulez utiliser un incrément de 0.5. Essayez seq(0, 10, by=0.5)."

# Q12
- Class: cmd_question
  Output: "Peut-être n'avez vous aucune idée de quel incrément vous avez besoin mais savez que vous voulez une liste de 30 nombres. Dans ce cas, seq(5, 10, length=30) fera très bien l'affaire. Essayez maintenant et conservez le résultat dans une variable que vous appellerez my_seq."
  CorrectAnswer: my_seq = seq(5, 10, length=30)
  AnswerTests: omnitest(correctExpr='my_seq = seq(5, 10, length=30)')
  Hint: "Vous utilisez la même fonction mais en changeant les arguments pour obtenir un résultat différent. Assurez-vous bien de stocker le résultat dans une variable my_seq, comme ceci:  my_seq = seq(5, 10, length=30)."

# Q13
- Class: cmd_question
  Output: "Pour confirmer que my_seq a bien une taille/longueur de 30, on peut utiliser la commande length(). Essayez !"
  CorrectAnswer: length(my_seq)
  AnswerTests: omnitest(correctExpr='length(my_seq)')
  Hint: Utilisez length(my_seq) pour voir la taille du vecteur my_seq.

# Q14
- Class: text
  Output: "Imaginons que nous ne connaissions pas la longueur du vecteur my_seq, mais que nous voulions générer une suite d'entiers de 1 à N, ou N représente la longueur du vecteur my_seq. En d'autres mots, nous voulons un nouveau vecteur (1, 2, 3, ...) qui fait la même longueur que my_seq."

# Q15
- Class: cmd_question
  Output: "Plusieurs façons de faire sont possibles. Une possibilité est de combiner l'opérateur ':' et la fonction length, comme ceci 1:length(my_seq). Essayez cette commande."
  CorrectAnswer: 1:length(my_seq)
  AnswerTests: omnitest(correctExpr='1:length(my_seq)')
  Hint: "Essayez 1:length(my_seq), sans attribuer le résultat à une nouvelle variable."

# Q16
- Class: cmd_question
  Output: "Une autre option est d'utiliser seq(along.with = my_seq). Essayez!"
  CorrectAnswer: seq(along.with = my_seq)
  AnswerTests: omnitest(correctExpr='seq(along.with = my_seq)')
  Hint: "Tapez seq(along.with = my_seq). Remarquez que nous utilisons toujours la même fonction seq(), mais avec un nouvel argument cet fois-ci, appelé 'along.with'. Cela indique à R que vous voulez une sequence de longueur identique à la séquence ou au vecteur indiqué en argument (ici, la séquence my_seq). Rappelez vous que vous pouvez tapez ?seq si vous aviez besoin de détails sur la fonction seq()."


# Q17
- Class: cmd_question
  Output: "Cependant, comme dans de nombreux cas pour des tâches communes et fréquentes, R fournit une fonction dédiée pour cela, appelée seq_along(). Tapez seq_along(my_seq) pour le constater."
  CorrectAnswer: seq_along(my_seq)
  AnswerTests: omnitest(correctExpr='seq_along(my_seq)')
  Hint: "La fonction seq_along()  est une variation de la fonction seq(). Essayez seq_along(my_seq) pour obtenir le même résultat par cette autre méthode."

# Q18
- Class: text
  Output: "En informatique, il y a souvent plusieurs approches pour résoudre un problème, c'est tout particulièrement le cas en programmation, incluant R. De manière générale, on considère que plus une solution est 'courte' (implique peu de code) meilleure elle est. J'ajouterai à titre personnel qu'il faut également prendre en considération la clarté du code, surtout en milieu professionnel ou scolaire ou d'autres personnes sont souvent amenées à lire votre code."

# Q19
- Class: text
  Output: "Si R a une fonction de base (on parle de fonction built-in car fournie directement par R sans bibliothèques additionnelles), il y a de fortes chances pour que cette fonction soit hautement optimisée pour cette tâche et que ce soit la meilleure solution. Plus vous gagnerez en compétence de programmation avec R, plus vous serez amené à écrire vos propres fonctions pour effectuer des tâches spécifiques pour lesquelles il n'existe pas de meilleure solution. Nous verrons l'écriture de fonctions dans une future leçon."

# Q20
- Class: text
  Output: "Une autre fonction associée à la création de suites est la fonction rep(), qui permet de 'répliquer'. Regardons d'un peu plus près son utilisation."

# Q21
- Class: cmd_question
  Output: "Si on veut créé un vecteur contenant 40 zéros, on peut utiliser la fonction rep(0, times = 40). Essayez cela."
  CorrectAnswer: rep(0, times = 40)
  AnswerTests: omnitest(correctExpr='rep(0, times = 40)')
  Hint: "Tapez rep(0, times = 40) pour créer un vecteur contenant 40 zeros."

# Q22
- Class: cmd_question
  Output: "Si nous voulons que notre vecteur contienne 10 répétitions de l'ensemble de valeurs (0, 1, 2), on fera alors: rep(c(0, 1, 2), times = 10). A vous de tester cela."
  CorrectAnswer: rep(c(0, 1, 2), times = 10)
  AnswerTests: omnitest(correctExpr='rep(c(0, 1, 2), times = 10)')
  Hint: "Essayez rep(c(0, 1, 2), times = 10) pour une autre forme de réplication. Utilisez la fonction c() pour indiquer à R que les nombres 0, 1, 2 forment l'ensemble à dupliquer."

# Q23
- Class: cmd_question
  Output: "Enfin, imaginez que vous cherchiez à répéter d'abord 10 fois le zéro, puis 10 fois le un, puis 10 fois le deux. Pour cela, nous utilisons l'argument 'each'. A vous !"
  CorrectAnswer: rep(c(0, 1, 2), each = 10)
  AnswerTests: omnitest(correctExpr='rep(c(0, 1, 2), each = 10)')
  Hint: "Tapez rep(c(0, 1, 2), each = 10) pour voir comment l'argument each agit sur la répétition et modifie le résultat."


- Class: text
  Output: "Félicitations, vous avez terminé ce module! Vous pouvez désormais effectuer le test 'Suites' sur moodle."

