
- Class: meta
  Course: beginR
  Lesson: Logique
  Author: Joris SANSEN
  Type: Standard
  Organization: Bordeaux INP / ENSTBB
  Version: 2.4.5


- Class: text
  Output: "Je vous rappelle que la commande info() vous permettra d'obtenir les quelques commandes de manipulation de swirl, notamment pour pauser (play()), reprendre (nxt()), quitter+sauvegarder (bye()), etc."

# Q1
- Class: text
  Output: "Ce cours est une courte introduction à l'utilisation des opérateurs logiques dans R."

# Q2
- Class: text
  Output: "Il n'existe que deux valeurs logiques dans R (et tout autre langage), VRAI et FAUX (TRUE/FALSE) et on les appelle des booléens. On peut ainsi construire des expressions qui sont évaluées en terme de vrai/faux."

- Class: text
  Output: "Attention, TRUE et FALSE doivent être écrits en majuscules pour être compris comme des valeurs booléennes par R, si vous les écrivez différemment, ils seront interprétés comme des variables (qui normalement n'existent pas, R vous dira alors qu'il ne trouve pas l'objet en question)."

- Class: text
  Output: "Dans la suite du module nous resterons avec la terminologie TRUE/FALSE mais sachez qu'avec R, vous pouvez également utiliser T/F pour les valeurs logiques TRUE/FALSE. Vous pouvez également utiliser les nombres 0 et 1 qui correspondent respectivement à FALSE et TRUE mais cette écriture est moins explicite car il est plus difficile d'identifier si le 0/1 font référence aux nombres 0/1 ou aux codes logiques FALSE/TRUE."

# Q3
- Class: text
  Output: "Beaucoup de questions de ce cours impliqueront d'évaluer des expressions logiques. Il peut être utile d'ouvrir une deuxième session de R pour faire des essais en parallèle."

# Q4
- Class: text
  Output: "Créer une expression logique nécessite d'utiliser un opérateur logique. Vous êtes familier des opérateurs arithmétiques (+, -, *, /), nous allons nous pencher un peu plus sur les opérateurs logiques (bien que vous en ayez déjà croisé certains dans les précédents modules)."

# Q5
- Class: cmd_question
  Output: "Le premier que nous allons aborder est l'opérateur d'égalité `==`. Utilisez cet opérateur pour savoir si TRUE est égal à TRUE."
  CorrectAnswer: TRUE == TRUE
  AnswerTests: omnitest(correctExpr='TRUE == TRUE')
  Hint: "Tapez TRUE == TRUE pour savoir si TRUE est égal à TRUE avec l'opérateur d'égalité `==`"

# Q6
- Class: text
  Output: "Tout comme en arithmétique, les expressions logiques peuvent être groupées dans des parenthèses pour ordonner les expressions à évaluer. Ainsi (FALSE == TRUE) == FALSE donne TRUE."

# Q7
- Class: cmd_question
  Output: "Pour tester cette propriété, évaluez (FALSE == TRUE) == FALSE."
  CorrectAnswer: (FALSE == TRUE) == FALSE
  AnswerTests: omnitest(correctExpr='(FALSE == TRUE) == FALSE')
  Hint: "Tapez: (FALSE == TRUE) == FALSE"

# Q8
- Class: cmd_question
  Output: "L'opérateur d'égalité peut également être utilisé pour comparer des nombres. Utilisez `==` pour évaluer si 6 est égal à 7."
  CorrectAnswer: 6 == 7
  AnswerTests: omnitest(correctExpr='6 == 7')
  Hint: "Utilisez l'opérateur d'égalité et tapez 6 == 7"

# Q9
- Class: text
  Output: "L'expression précédente retourne en toute logique FALSE puisque 6 est plus petit que 7. Heureusement, il existe également des opérateurs d'inégalité qui permettent de vérifier si une valeur est plus petite/grande qu'une autre."

# Q10
- Class: cmd_question
  Output: "L'opérateur `plus petit` `<` test si un nombre à gauche (left operand) est plus petit que le nombre de droite (right operand). Ecrivez une expression permettant d'évaluer si 6 est plus petit que 7."
  CorrectAnswer: 6 < 7
  AnswerTests: omnitest(correctExpr='6 < 7')
  Hint: "Utilisez le symbole `<`(généralement à coté de maj sur les claviers francophones) et tapez 6 < 7"


# Q11
- Class: cmd_question
  Output: "On peut également tester `inférieur ou égal` via l'operateur `<=` qui, en toute logique, vérifie si la valeur de gauche est inférieure ou égale à celle de droite. Testez cette expression en vérifiant si 10 est inférieur ou égal à 10."
  CorrectAnswer: 10 <= 10
  AnswerTests: omnitest(correctExpr='10 <= 10')
  Hint: "Utilisez l'opérateur `<=` et tapez 10 <= 10"

# Q12
- Class: text
  Output: "Nous ne l'expérimenterons pas ici mais gardez à l'esprit qu'il y a l'équivalent `supérieur (ou égal) à  `>` et `>=`."

# Q13
- Class: mult_question
  Output: "Laquelle de ces expressions s'évalue à FALSE ?"
  CorrectAnswer: 9 >= 10
  AnswerChoices: 9 >= 10;7 == 7;6 < 8;0 > -36
  AnswerTests: omnitest(correctVal='9 >= 10')
  Hint: "Si besoin, n'hésitez pas à les tester dans une deuxième session R."

# Q14
- Class: mult_question
  Output: "Laquelle de ces expressions s'évalue à TRUE?"
  CorrectAnswer: 9 >= 10
  AnswerChoices: 9 >= 10;7 == 9;57 < 8;-6 > -7
  AnswerTests: omnitest(correctVal='-6 > -7')
  Hint: "Si besoin, n'hésitez pas à les tester dans une deuxième session R ou en quittant temporairement ce cours avec la commande 'play()' - rappelez-vous, vous pourrez revenir dans ce module en tapant nxt()."

# Q15
- Class: cmd_question
  Output: "Le prochain opérateur dont nous allons discuter est l'opérateur différent (non égal plus exactement), représenté par le symbole `!=`. Différent test si deux valeurs sont, je vous le donne en mille, différentes; ainsi, TRUE != FALSE retourne TRUE. Tout comme pour l'opérateur d'égalité,  `!=` peut aussi être utilisé avec des nombres. Essayez d'écrire une expression verifiant si 5 est différent de 7."
  CorrectAnswer: 5 != 7
  AnswerTests: omnitest(correctExpr='5 != 7')
  Hint: "Utilisez l'opérateur non égal et tapez 5 != 7"

# Q16
- Class: cmd_question
  Output: "On peut également utiliser le point d'exclamation (le `not`) pour négativer une expression booléenne. Ainsi, le `!` dans !TRUE (not TRUE) répond FALSE et !FALSE (not FALSE) répond TRUE. Essayez d'utiliser le `not` et l'opérateur d'égalité pour trouver la négation de 5 est égal à 7."
  CorrectAnswer: '!5 == 7'
  AnswerTests: any_of_exprs('!5 == 7', '!(5 == 7)')
  Hint: "Cette expression peut sembler un peu tordue, pensez à décomposer en différentes parties, ce que l'on teste (5 == 7) et ce que l'on veut négativer (le résultat de ce qui a été testé)."

# Q17
- Class: text
  Output: "Prenons un moment pour analyser un peu ça: l'opérateur `==` test si les deux parties de gauche et droite sont bien égales, l'opérateur `!=` test la différence et l'opérateur NOT (`!`) négative une expressison logique changeant ainsi un TRUE en FALSE et un FALSE en TRUE."

# Q18
- Class: mult_question
  Output: Laquelle de ces propositions retourne FALSE?
  CorrectAnswer: "!(0 >= -1)"
  AnswerChoices: "!(0 >= -1);!FALSE;7 != 8;9 < 10"
  AnswerTests: omnitest(correctVal='!(0 >= -1)')
  Hint: "Si besoin, n'hésitez pas à les tester dans une deuxième session R."


# Q19
- Class: mult_question
  Output: 'Selon vous, que retournera cette expression ?: (TRUE != FALSE) == !(6 == 7)'
  CorrectAnswer: TRUE
  AnswerChoices: TRUE;FALSE;Peut-on vraiment obtenir une vérité objective en programmation ?;%>%
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: "Si vous avez des difficultés, essayez de décomposer et d'ordonner les expressions pour reconstruire le processus de réponse."


# Q20
- Class: text
  Output: "Au bout d'un moment, vous serez amené à evaluer les relations entre plusieurs expressions logiques. C'est là que les opérateurs AND (et) et OR (ou) interviennent."

# Q21
- Class: cmd_question
  Output: "Tout d'abord, examinons comment fonctionne l'opérateur AND. l'opérateur AND dans R s'utilise avec `&`: si les expressions à gauche ET à droite sont vraies (TRUE) alors l'ensemble retournera TRUE, sinon on obtiendra FALSE. Il faut donc que les deux expressions soient vraies pour obtenir vrai (A ET B doivent être vraies pour que l'ensemble soit vrai). Ainsi TRUE & TRUE retournera TRUE. Essayez d'évaluer l'expression suivante: FALSE & FALSE pour voir ce qui est retourné."
  CorrectAnswer: FALSE & FALSE
  AnswerTests: omnitest(correctExpr='FALSE & FALSE')
  Hint: "Tapez FALSE & FALSE pour voir comment l'opérateur AND fonctionne"


# Q22
- Class: cmd_question
  Output: "Vous pouvez utiliser l'opérateur `&` pour évaluer l'ensemble des valeurs d'un vecteur. Testons les deux pour les voir en action. Tapez l'expression TRUE & c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE & c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE & c(TRUE, FALSE, FALSE)')
  Hint: "Tapez simplement TRUE & c(TRUE, FALSE, FALSE) pour voir comment l'opérateur & fonctionne"


# Q23
- Class: text
  Output: "Ce qu'il se passe ici est que la partie gauche de l'expression (avant le &) est recyclée pour chaque élément de la partie de droite. Cela revient à faire 'rep(TRUE, 3) & c(TRUE, FALSE, FALSE)'."

# Q24
#- Class: cmd_question
#  Output: "Maintenant nous allons utiliser la même expression mais avece cette fois-ci un double & (&) comme opérateur AND. Evaluez cette expression: TRUE & c(TRUE, FALSE, FALSE)."
#  CorrectAnswer: "TRUE & c(TRUE, FALSE, FALSE)"
#  AnswerTests: omnitest(correctExpr='TRUE & c(TRUE, FALSE, FALSE)')
#  Hint: "Comme vous allez le constater, & est une version un peu différente de l'opérateur AND. Tapez: TRUE & c(TRUE, FALSE, FALSE)"


# Q25
# - Class: text
 # Output: "Dans ce cas, la partie de gauche n'est évaluée qu'avec le premier élément de la partie de droite. Le reste du vecteur n'est pas testé."

# Q26
- Class : text
  Output: L'operateur OR (ou) suit globalement les mêmes règles que l'opérateur AND. Il utilise le symbole `|` (pipe) pour évaluer l'ensemble d'un vecteur.

# Q27
- Class : text
  Output: "Une expression utilisant l'opérateur OR sera vraie dès lors qu'une des parties de gauche ou de droite sera vraie; si toutes les deux sont vraies, il retournera vrai mais si aucune n'est vraie, il retournera alors faux. Il faut lire cet opérateur comme 'au moins l'une des deux parties est vraie'."

# Q28
- Class: cmd_question
  Output: "Testons la version vecteur de l'opérateur OR. Evaluez l'expression suivante: TRUE | c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE | c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE | c(TRUE, FALSE, FALSE)')
  Hint: "Tapez: TRUE | c(TRUE, FALSE, FALSE) pour tester l'opérateur OR sur un vecteur."

# Q29
#- Class: cmd_question
#  Output: "Et maintenant la version non vectorisée TRUE | c(TRUE, FALSE, FALSE)."
#  CorrectAnswer: "TRUE | c(TRUE, FALSE, FALSE)"
#  AnswerTests: omnitest(correctExpr='TRUE | c(TRUE, FALSE, FALSE)')
#  Hint: "Comme pour le AND, le double pipe permet d'empêcher le recyclage d'expression. Testez le avec la commande TRUE | c(TRUE, FALSE, FALSE)"


# Q30
- Class : text
  Output: "Les opérateurs logiques peuvent être chainés, tout comme les opérateurs arithmétiques. Ainsi les expressions du genre `6 != 10 & FALSE & 1 >= 2` ou `TRUE | 5 < 9.3 | FALSE` n'ont rien d'exceptionnel."


# Q31
- Class : cmd_question
  Output: "Si vous vous rappelez vos cours, les expressions arithmétiques ont un ordre et des priorités. Il en est de même avec les expressions booléennes. Ainsi, les opérateurs AND sont évalués avant les expressions OR s'ils ont le même niveau dans l'expression (hors priorisation par parenthèses). Exemple d'expression ambigue: Tapez 5 > 8 | 6 != 8 & 4 > 3.9"
  CorrectAnswer: "5 > 8 | 6 != 8 & 4 > 3.9"
  AnswerTests: omnitest(correctExpr='5 > 8 | 6 != 8 & 4 > 3.9')
  Hint: "Voyez comment l'ordre des opérations peut avoir un impact sur la réponse retournée en tapant: 5 > 8 | 6 != 8 & 4 > 3.9"

# Q32
- Class : text
  Output: "Analysons un peu l'ordre des opérations de l'expression précédente. Tout d'abord, les parties de gauche et de droite de l'opérateur AND sont évaluées. 6 est différent de 8 et 4  est effectivement plus grand que 3.9, les deux sont vraies, donc le résultat de l'expression TRUE & TRUE retourne TRUE. Ensuite, la partie gauche du OR est evalué: 5 n'est pas plus grand que 8, donc l'expression devient FALSE | TRUE. Puisque la partie de droite est vraie, l'expression retourne donc vrai."

# Q33
- Class: mult_question
  Output: Laquelle de ces expressions retournera TRUE?
  CorrectAnswer: "TRUE & FALSE | 9 >= 4 & 3 < 6"
  AnswerChoices: "TRUE & FALSE | 9 >= 4 & 3 < 6;TRUE & 62 < 62 & 44 >= 44;99.99 > 100 | 45 < 7.3 | 4 != 4.0;FALSE | TRUE & FALSE"
  AnswerTests: omnitest(correctVal='TRUE & FALSE | 9 >= 4 & 3 < 6')
  Hint: "Si vous avez des difficultés, essayez de décomposer et d'ordonner les expressions pour reconstruire le processus de réponse."

# Q34
- Class: mult_question
  Output: Laquelle de ces expressions retournera FALSE?
  CorrectAnswer: "FALSE & 6 >= 6 | 7 >= 8 | 50 <= 49.5"
  AnswerChoices: "FALSE & 6 >= 6 | 7 >= 8 | 50 <= 49.5;FALSE | TRUE & 6 != 4 | 9 > 4;!(8 > 4) |  5 == 5.0 & 7.8 >= 7.79;6 >= -9 & !(6 > 7) & !(!TRUE)"
  AnswerTests: omnitest(correctVal='FALSE & 6 >= 6 | 7 >= 8 | 50 <= 49.5')
  Hint: "Si vous avez des difficultés, essayez de décomposer et d'ordonner les expressions pour reconstruire le processus de réponse."

# Q35
- Class : text
  Output: "Maintenant que vous êtes familier avec les expressions logiques de R, vous pouvez tirer partie de certaines fonctions de R utilisées pour manipuler les expressions booléennes."

# Q36
- Class : cmd_question
  Output: "La fonction isTRUE() prend un seul argument. Si cet argument est évalué à TRUE, la fonction retournera TRUE. Sinon, elle retournera FALSE. Essayez en tapant: isTRUE(6 > 4)"
  CorrectAnswer: "isTRUE(6 > 4)"
  AnswerTests: omnitest(correctExpr='isTRUE(6 > 4)')
  Hint: "Testez la fonction isTRUE() en tapant: isTRUE(6 > 4)"

# Q37
- Class: mult_question
  Output: Laquelle de ces expressions retournera TRUE?
  CorrectAnswer: "!isTRUE(4 < 3)"
  AnswerChoices: "isTRUE(!TRUE);isTRUE(3);isTRUE(NA);!isTRUE(4 < 3);!isTRUE(8 != 5)"
  AnswerTests: omnitest(correctVal='!isTRUE(4 < 3)')
  Hint: 'isTRUE() ne retournera TRUE que si son argument est évalué à TRUE.'

# Q38
- Class : cmd_question
  Output: "La fonction identical() retournera TRUE si les deux objets mis en argument sont identiques. Essayez cela avec cette commande: identical('twins', 'twins')"
  CorrectAnswer: "identical('twins', 'twins')"
  AnswerTests: omnitest(correctExpr="identical('twins', 'twins')")
  Hint: "Tapez: identical('twins', 'twins')"

# Q39
- Class: mult_question
  Output: Laquelle de ces expressions retournera TRUE?
  CorrectAnswer: "identical(5 > 4, 3 < 3.1)"
  AnswerChoices: "identical(5 > 4, 3 < 3.1);identical(4, 3.1);identical('hello', 'Hello');!identical(7, 7)"
  AnswerTests: omnitest(correctVal='identical(5 > 4, 3 < 3.1)')
  Hint: "Rappelez-vous, identical() ne retournera TRUE que si ses arguments sont strictement identiques."

# Q40
- Class : cmd_question
  Output: "Vous devriez également connaître le fonctionnement de la fonction xor(). Cette fonction prend deux arguments et correspond à l'opérateur XOR (OU EXCLUSIF). Contrairement au OR classique, le XOR ne retournera TRUE que losqu'UNE SEULE des deux expressions est évaluée à TRUE, sinon on obtient FALSE. Essayez cette fonction en tapant xor(5 == 6, !FALSE)"
  CorrectAnswer: "xor(5 == 6, !FALSE)"
  AnswerTests: omnitest(correctExpr='xor(5 == 6, !FALSE)')
  Hint: "Testez le xor en tapant: xor(5 == 6, !FALSE)"

# Q41
- Class : text
  Output: "5 == 6 retournera FALSE, !FALSE retourne TRUE, d'ou xor(FALSE, TRUE)
    retourne TRUE. D'un autre côté, si le premier argument était changé en 5 == 5 et le 2ème maintenu tel quel, alors les deux auraient retourné TRUE, donc  xor(TRUE, TRUE) aurait retourné FALSE."

# Q42
- Class: mult_question
  Output: Laquelle de ces expressions retournera FALSE?
  CorrectAnswer: "xor(4 >= 9, 8 != 8.0)"
  AnswerChoices: "xor(4 >= 9, 8 != 8.0);xor(!isTRUE(TRUE), 6 > -1);xor(identical(xor, 'xor'), 7 == 7.0);xor(!!TRUE, !!FALSE)"
  AnswerTests: omnitest(correctVal='xor(4 >= 9, 8 != 8.0)')
  Hint: "Pour que xor() retourne TRUE, un seul des deux arguments doit être évalué à TRUE."


# Q43
- Class : cmd_question
  Output: "Pour les prochaines questions, nous allons avoir besoin de créer un vecteur d'entiers que nous appellerons ints. Créez ce vecteur d'entiers en effectuant un tirage aléatoire de 10 éléments avec la fonction sample."
  CorrectAnswer: "ints = sample(10)"
  AnswerTests: omnitest(correctExpr='ints = sample(10)')
  Hint: "Bloqué? Rappelez-vous que l'on peut tirer aléatoirement 10 éléments suivant une distribution normale sans remise avec la commande sample(10). Pensez bien à affecter ce tirage à une variable appelée ints."

# Q44
- Class : cmd_question
  Output: "Affichez le contenu de ints."
  AnswerTests: omnitest(correctExpr='ints')
  CorrectAnswer: "ints"
  Hint: "Tapez: ints"

# Q45
- Class : cmd_question
  Output: "Le vecteur `ints` correspond donc à un tirage aléatoire de 10 éléments suivant une distribution normale sans remise. Imaginons que nous cherchions à évaluer des expressions booléennes à propos des valeurs contenues dans ints. Si l'on tape ints > 5, nous obtiendrons un vecteur de booléens évaluant pour chaque valeur de ints si oui ou non elle est plus grande que 5. Essayez cela en tapant: ints > 5"
  CorrectAnswer: "ints > 5"
  AnswerTests: omnitest(correctExpr='ints > 5')
  Hint: "Vérifiez quels éléments de `ints` sont plus grands que 5 en tapant: ints > 5."

# Q46
- Class : text
  Output: "Nous pouvons utiliser le vecteur logique résultant pour poser d'autres questions sur ints. La fonction which() prend un vecteur logique en argument et retourne les indices de position du vecteur évalués à TRUE. Par exemple which(c(TRUE, FALSE, TRUE)) retournerai le vecteur c(1, 3)."

# Q47
- Class : cmd_question
  Output: "Utilisez la fonction which() pour identifier les indices de position des valeurs de ints plus grandes que 7."
  CorrectAnswer: "which(ints > 7)"
  AnswerTests: omnitest(correctExpr='which(ints > 7)')
  Hint: "Utilisez la fonction which() sur le vecteur logique produit par `ints > 7`"

# Q48
- Class: mult_question
  Output: Laquelle de ces expressions fournirait les indices de position des éléments de ints inférieurs ou égaux à 2 ?
  CorrectAnswer: "which(ints <= 2)"
  AnswerChoices: "ints < 2;ints <= 2;which(ints < 2);which(ints <= 2)"
  AnswerTests: omnitest(correctVal='which(ints <= 2)')
  Hint: 'Utilisez la fonction which().'

# Q49
- Class : text
  Output: "De façon similaire à la fonction which(), les fonctions any() et all() prennent des vecteurs logiques en argument. La fonction any() retournera TRUE si UN OU PLUS des éléments dans le vecteuer logique est à TRUE. La fonction all() ne retournera TRUE que si TOUS les élements du vecteur logique sont à TRUE."

# Q50
- Class : cmd_question
  Output: "Utilisez la fonction any() pour voir si au moins un des éléments de ints est inférieur à 0."
  CorrectAnswer: "any(ints < 0)"
  AnswerTests: omnitest(correctExpr='any(ints < 0)')
  Hint: "Utilisez la fonction any() sur le vecteur logique produit par l'expression `ints < 0`"

# Q51
- Class : cmd_question
  Output: "Utilisez la fonction all() pour voir si tous les éléments de ints sont plus grands que 0."
  CorrectAnswer: "all(ints > 0)"
  AnswerTests: omnitest(correctExpr='all(ints > 0)')
  Hint: "Utilisez la fonction all() sur le vectur logique produit par l'expression `ints > 0`"

# Q52
- Class: mult_question
  Output: Laquelle de ces expression est evaluée à TRUE?
  CorrectAnswer: "any(ints == 10)"
  AnswerChoices: "any(ints == 10);all(ints == 10);all(c(TRUE, FALSE, TRUE));any(ints == 2.5)"
  AnswerTests: omnitest(correctVal='any(ints == 10)')
  Hint: "any() retournera TRUE si au moins un des éléments du vecteur vérifie l'expression (est évalué à TRUE dans le vecteur logique)."

# Q53
- Class : text
  Output: "C'est tout pour cette introduction aux booléens dans R. Félicitations!"

- Class: text
  Output: "Félicitations, vous avez terminé ce module! Vous pouvez effectuer le test moodle 'Logique'."
